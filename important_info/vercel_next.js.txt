Google search results: Here is a list of crucial technical information for using Vercel Next.js:

### 1. Initializing a Next.js Application
To begin a new Next.js project, you can use the `create-next-app` command-line tool. This will set up a new project with all the necessary dependencies and a basic file structure.

```bash
npx create-next-app@latest my-next-app
cd my-next-app
npm run dev
```

### 2. File-Based Routing.
Next.js uses a file-based routing system. Each file inside the `pages` directory automatically becomes a route. For example, a file at `pages/about.js` will be accessible at the `/about` route.

```javascript
// pages/about.js
function About() {
  return <div>About Us</div>;
}

export default About;
```

### 3. Linking Between Pages
To navigate between pages, you can use the `Link` component from `next/link`. This enables client-side navigation between pages, which is faster than traditional browser navigation.

```javascript
import Link from 'next/link';

function Home() {
  return (
    <nav>
      <Link href="/about">
        <a>About</a>
      </Link>
    </nav>
  );
}

export default Home;
```

### 4. Server-Side Rendering (SSR).
You can fetch data on the server for each request using `getServerSideProps`. This is useful for pages that need to display frequently updated data. The fetched data is passed as props to the page component.

```javascript
export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();

  return {
    props: { data }, // will be passed to the page component as props
  };
}

function Page({ data }) {
  // Render data...
}

export default Page;
```

### 5. Dynamic Routing.
You can create dynamic routes by using brackets in the filename (e.g., `[id].js`). This allows you to create pages for a list of items, such as blog posts or products. The dynamic parameter is available in the `context` object of `getServerSideProps`.

```javascript
// pages/posts/[id].js
export async function getServerSideProps(context) {
  const { id } = context.params;
  const res = await fetch(`https://api.example.com/posts/${id}`);
  const post = await res.json();

  return {
    props: { post },
  };
}

function Post({ post }) {
  // Render post...
}

export default Post;
```

### 6. API Routes
You can create API endpoints as serverless functions inside the `pages/api` directory. These are useful for handling form submissions, interacting with a database, or implementing any other backend logic.

```javascript
// pages/api/hello.js
export default function handler(req, res) {
  res.status(200).json({ text: 'Hello' });
}
```

### 7. Layouts.
To create a layout that is shared across multiple pages, you can create a `_app.js` file in the `pages` directory. This is useful for adding a global navigation bar, footer, or other common elements.

```javascript
// pages/_app.js
import Navbar from '../components/Navbar';

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Navbar />
      <Component {...pageProps} />
    </>
  );
}

export default MyApp;
```

### 8. Styling
Next.js supports various styling methods, including global CSS, CSS Modules, and popular libraries like Tailwind CSS. For global styles, you can import a CSS file in `pages/_app.js`.

```javascript
// pages/_app.js
import '../styles/globals.css';

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

export default MyApp;
```

### 9. Server Actions.
With Server Actions, you can run server-side code directly from your components without needing to create a separate API route. This is useful for handling form submissions or mutations.

```javascript
// app/page.js
export default function Page() {
  async function create(formData) {
    'use server';
    // ...
  }

  return (
    <form action={create}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  );
}
```

### 10. Middleware.
Middleware allows you to run code before a request is completed. This can be used for authentication, A/B testing, or routing. Middleware runs on the edge, making it fast and performant.

```javascript
// middleware.js
import { NextResponse } from 'next/server';

export function middleware(request) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url));
  }
}
```