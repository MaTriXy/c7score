Here are the top 10 most important pieces of information from the provided files:

---
**What is 21st.dev?**
**[21st.dev](https://21st.dev)** is your go-to open-source community registry for **React UI components**! Whether you're a developer, designer, or just someone who loves building beautiful interfaces, 21st.dev is the place to **publish, discover, and install** minimal, modern, and reusable React components powered by **Tailwind CSS** and **Radix UI**.

---
**How to Install a Component**
Found a component you love on [21st.dev](https://21st.dev)? Installing it is a breeze. Just copy the `npx shadcn` command and run it in your project's root folder.

For example, to install the `shadcn/ui/accordion` component, run:

```bash
npx shadcn@latest add "https://21st.dev/r/shadcn/accordion"
```

This command will:

*   Create all necessary files for the component and its dependencies.
*   Extend your Tailwind theme automatically.
*   Set up any required global styles.

---
**Why Use 21st.dev?**
-   **Open Source & Community-Driven**: Built by developers, for developers. Everyone is welcome to contribute!
-   **Minimal & Modern**: Components are lightweight, customizable, and designed with Tailwind and Radix UI.
-   **Easy to Use**: Install any component with a single `npx shadcn` command.
-   **Multiple Demos**: Each component can have multiple demos with previews and videos.
-   **Extensible**: Add your own components, themes, and dependencies effortlessly.
-   **TypeScript First**: Full type support out of the box.

---
**How to Publish Your Component in 1 Minute!**
Yes, you read that right‚Äî**1 minute**! üïí
Publishing your React component is as easy as pie. Just head over to our [publish page](https://21st.dev) and share your creation with the world.

---
**Component File Structure for Publishing**
```
your-component/                # How to organize your files
‚îú‚îÄ‚îÄ code.tsx                  # Main component
‚îú‚îÄ‚îÄ tailwind.config.js        # Optional Tailwind config
‚îú‚îÄ‚îÄ globals.css              # Optional global styles
‚îî‚îÄ‚îÄ demos/                    # Each component can have multiple demos
    ‚îú‚îÄ‚îÄ default/             # Primary demo (required)
    ‚îÇ   ‚îú‚îÄ‚îÄ code.demo.tsx    # Demo implementation
    ‚îÇ   ‚îú‚îÄ‚îÄ preview.png      # Static preview image
    ‚îÇ   ‚îî‚îÄ‚îÄ video.mp4        # Optional demo video
    ‚îî‚îÄ‚îÄ advanced/            # Additional demos (optional)
        ‚îú‚îÄ‚îÄ code.demo.tsx
        ‚îú‚îÄ‚îÄ preview.png
        ‚îî‚îÄ‚îÄ video.mp4
```

---
**Supported Technologies/Features for Components**
-   **Pure React Components** ‚Äì Build with React, no fuss.
-   **Next.js Client Components** ‚Äì We've got you covered (server-side rendering coming soon!).
-   **TypeScript** ‚Äì Because type safety is ‚ù§Ô∏è.
-   **Tailwind Themes** ‚Äì Customize to your heart's content.
-   **Global CSS Styles** ‚Äì Add your own flair.
-   **Radix UI** ‚Äì Accessible and unstyled primitives.
-   **Any npm Dependencies** ‚Äì Thanks to [Sandpack](https://sandpack.codesandbox.io/).
-   **Internal Dependencies** ‚Äì Use any component from our registry as a dependency.
-   **Multiple Demos** ‚Äì Showcase different use cases and variations.
-   **Preview Images & Videos** ‚Äì Make your component shine.

---
**Component Review Process for Featured Listings**
When you publish a component, it follows this journey:

1.  **Initial State** (`on_review`) - Component is available via direct link and awaiting review
2.  **Posted State** (`posted`) - Component has passed review and is available on your profile and via direct link
3.  **Featured State** (`featured`) - Component is featured on the homepage and in public listings

Serafim ([@serafimcloud](https://x.com/serafimcloud)) personally reviews each component to ensure it meets quality standards before featuring it.

---
**Quality Standards for Featured Components**
To ensure your component gets featured, follow these guidelines:

1.  **Visual Design**: Visually polished, modern UI/UX, light/dark theme support, consistent spacing/sizing.
2.  **Code Structure**: Follow shadcn/ui pattern (separate logic from demo), reusable functionality in component file, realistic demo content via props.
3.  **Theming**: Use CSS variables from shadcn's theme system (`globals.css`), support light/dark modes, use `hsl` variables (e.g., `hsl(var(--background))`), follow naming conventions.
4.  **Accessibility**: Proper ARIA attributes, keyboard navigation, sufficient color contrast, screen reader testing.
5.  **Documentation**: Clear prop documentation, usage examples, required dependencies, helpful comments.
6.  **Best Practices**: Focused and single-purpose, minimal external dependencies, responsive behavior, TypeScript best practices, meaningful default props.

---
**21st.dev Platform Architecture**
The project uses a modern stack:

-   **Frontend**: Next.js 14
-   **Database**: Supabase for metadata and user data
-   **Authentication**: Clerk
-   **File Storage**: Cloudflare R2
-   **Analytics**: Amplitude

---
**Contributing to the 21st.dev Platform: Setup Guide**
To set up a local development environment:

**Prerequisites**: A **Supabase**, **Clerk**, and **Cloudflare R2** account.

1.  **Fork & Clone**: Fork the repository and clone it locally.
2.  **Install Dependencies**: Use `pnpm`:
    ```bash
    pnpm install
    ```
3.  **Environment Setup**: Create a `.env.local` in `apps/web` with:
    ```
    # Supabase
    NEXT_PUBLIC_SUPABASE_URL=https://*****
    NEXT_PUBLIC_SUPABASE_KEY=*****
    SUPABASE_SERVICE_ROLE_KEY=*****

    # Clerk
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=*****
    CLERK_SECRET_KEY=*****
    CLERK_WEBHOOK_SECRET=*****

    # Cloudflare R2
    NEXT_PUBLIC_CDN_URL=https://*****
    R2_ACCESS_KEY_ID=*****
    R2_SECRET_ACCESS_KEY=*****
    NEXT_PUBLIC_R2_ENDPOINT=https://*****

    # Other
    NEXT_PUBLIC_APP_URL=https://21st.dev
    NEXT_PUBLIC_AMPLITUDE_API_KEY=*****
    ```
4.  **Start Development**:
    ```bash
    pnpm dev
    ```