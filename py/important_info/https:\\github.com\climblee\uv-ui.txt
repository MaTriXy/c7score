Google search results: Here is a list of crucial technical information to help you use the `uv-ui` library when coding:

1.  **Direct Component Usage**
    All `uv-ui` components can be used directly in your Vue templates without needing to be manually imported or registered. This is thanks to the `easycom` component compilation feature of `uni-app`, which automatically registers any components following its naming convention. This makes the development process faster and the code cleaner.

2.  **Icon Component (`uv-icon`)**
    The `uv-icon` component is a basic but essential component for displaying icons. You can specify the icon's name, size, and color using props. This allows for easy integration of vector icons throughout your application.

    ```vue
    <template>
      <uv-icon name="baidu" size="30" color="#909399"></uv-icon>
    </template>
    ```

3.  **Button Component (`uv-button`)**
    The library includes a flexible `uv-button` component for user actions. It can be customized with different types (e.g., primary, success, warning), sizes, and shapes (e.g., square, circle). You can also handle click events directly on the component.

    ```vue
    <template>
      <uv-button type="primary" @click="handleClick">Primary Button</uv-button>
    </template>
    <script>
      export default {
        methods: {
          handleClick() {
            console.log('Button clicked!');
          }
        }
      }
    </script>
    ```

4.  **Layout System (`uv-row`)**
    `uv-ui` provides a layout system for creating responsive and organized UIs. The `uv-row` component acts as a container for columns, helping to structure the page content. While the documentation was not browsed, a typical implementation would involve `uv-col` components within a `uv-row`.

    ```vue
    <template>
      <uv-row>
        <uv-col span="6">
          <view>Column 1</view>
        </uv-col>
        <uv-col span="6">
          <view>Column 2</view>
        </uv-col>
      </uv-row>
    </template>
    ```

5.  **Form Handling (`uv-form` & `uv-input`)**
    The library provides components for building forms, such as `uv-form` and `uv-input`. The `uv-form` component can be used to manage the state and validation of its child input elements. The `uv-input` component is an enhanced text input field.

    ```vue
    <template>
      <uv-form :model="form" ref="uForm">
        <uv-form-item label="Username">
          <uv-input v-model="form.name" />
        </uv-form-item>
      </uv-form>
    </template>
    <script>
      export default {
        data() {
          return {
            form: {
              name: ''
            }
          }
        }
      }
    </script>
    ```

6.  **Toast Notifications (`uv-toast`)**
    For displaying brief, non-intrusive notifications, the `uv-toast` component is used. It is often controlled programmatically by accessing its instance through a `ref` and calling methods to show or hide messages.

    ```vue
    <template>
      <view>
        <uv-button @click="showToast">Show Toast</uv-button>
        <uv-toast ref="uToast"></uv-toast>
      </view>
    </template>
    <script>
      export default {
        methods: {
          showToast() {
            this.$refs.uToast.show({
              type: 'success',
              message: "Operation successful",
            })
          }
        }
      }
    </script>
    ```

7.  **Modal Dialogs (`uv-modal`)**
    The `uv-modal` component is used to display important information or require user confirmation. You can control its visibility with a `v-model` or a `ref`, and it includes slots for custom content and actions.

    ```vue
    <template>
      <view>
        <uv-button @click="showModal = true">Open Modal</uv-button>
        <uv-modal :show="showModal" title="Confirmation" content="Are you sure you want to proceed?" @confirm="onConfirm" @cancel="showModal = false"></uv-modal>
      </view>
    </template>
    <script>
      export default {
        data() {
          return {
            showModal: false
          }
        },
        methods: {
          onConfirm() {
            // Handle confirmation logic
            this.showModal = false;
          }
        }
      }
    </script>
    ```

8.  **Asynchronous Loading (`uv-skeleton` and `uv-loading-icon`)**
    The library provides components to indicate loading states, which is crucial for applications that fetch data asynchronously. You can use `uv-loading-icon` for a simple spinner or `uv-skeleton` for a more detailed content placeholder.

    ```vue
    <template>
      <view v-if="loading">
        <uv-skeleton :rows="3" title></uv-skeleton>
      </view>
      <view v-else>
        <!-- Your content here -->
      </view>
    </template>
    <script>
      export default {
        data() {
          return {
            loading: true,
          }
        },
        mounted() {
          setTimeout(() => {
            this.loading = false;
          }, 2000);
        }
      }
    </script>
    ```

9.  **Rich Text Parsing (`uv-parse`)**
    The `uv-parse` component is designed to render rich text content, such as HTML or Markdown, within your `uni-app` application. This is useful for displaying content from a CMS or API that includes formatted text.

    ```vue
    <template>
      <uv-parse :content="htmlContent"></uv-parse>
    </template>
    <script>
      export default {
        data() {
          return {
            htmlContent: '<h1>This is a title</h1><p>This is a paragraph.</p>'
          }
        }
      }
    </script>
    ```

10. **Extending Functionality**
    `uv-ui` includes a set of utility functions and configuration options that are not enabled by default. To use features like the built-in request library or to customize the theme, you must create an extension configuration file. This allows you to access `uni.$uv.xxx` methods and variables.